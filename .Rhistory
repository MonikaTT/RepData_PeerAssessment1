nrows = 1, na.strings = "?", as.is = 1:9)
##Giving the names of the columns to the datafarame
names(data)<-names
##Changing locale to get English x-axis lables
loc <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_GB.UTF-8")
##Creating time data
DateTime<-strptime(with(data, paste(Date, Time, sep = " ")), "%d/%m/%Y %H:%M:%S")
##Creating a plot and sending it to png
png(file="./data/plot3.png", width = 480, height = 480)
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=0.5, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
##Going back to origin locale
Sys.setlocale("LC_TIME", loc)
png(file="./data/plot3.png", width = 480, height = 480)
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=1, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
##Going back to origin locale
Sys.setlocale("LC_TIME", loc)
Sys.setlocale("LC_TIME", "en_GB.UTF-8")
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=1, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
Sys.setlocale("LC_TIME", loc)
str(data)
plot(DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(DateTime, data$Global_active_power, type = "l", xlab = " ", ylab = "Global Active Power")
loc <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_GB.UTF-8")
##Seting png device
##png(file="./data/plot3.png", width = 480, height = 480)
##Creating a plot
par(mfrow=c(2,2))
##First plot
plot(DateTime, data$Global_active_power, type = "l", xlab = " ", ylab = "Global Active Power")
##Second plot
plot(DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
##Third plot
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=1, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##Fourth plot
plot(DateTime, data$Global_reactive_power, type = "l", xlab = "datetime")
##Creating time data
DateTime<-strptime(with(data, paste(Date, Time, sep = " ")), "%d/%m/%Y %H:%M:%S")
##Changing locale to get English x-axis lables
loc <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_GB.UTF-8")
##Seting png device
png(file="./data/plot4.png", width = 480, height = 480)
##Creating a plot
par(mfrow=c(2,2))
##First plot
plot(DateTime, data$Global_active_power, type = "l", xlab = " ", ylab = "Global Active Power")
##Second plot
plot(DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
##Third plot
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=1, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
##Fourth plot
plot(DateTime, data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
##Swithing off png device
dev.off()
##Going back to origin locale
Sys.setlocale("LC_TIME", loc)
##Dwonloading data
if (!file.exists("data")) {
dir.create("data")
}
fileURL<-"https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, destfile = "./data/data.zip", method = "curl")
unzip("./data/data.zip", exdir = "./data")
##Reading in data, header=True, skiping 66636, reading in 2880, na=?
data<-read.table("./data/household_power_consumption.txt",sep = ";", header = FALSE,
skip = 66637, nrows = 2880, na.strings = "?")
names<-read.table("./data/household_power_consumption.txt", sep = ";", header = FALSE,
nrows = 1, na.strings = "?", as.is = 1:9)
##Giving the names of the columns to the datafarame
names(data)<-names
##Changing locale to get English x-axis lables
loc <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_GB.UTF-8")
##Creating time data
DateTime<-strptime(with(data, paste(Date, Time, sep = " ")), "%d/%m/%Y %H:%M:%S")
##Creating a plot and sending it to png
png(file="./data/plot3.png", width = 480, height = 480)
plot(DateTime, data$Sub_metering_1,type = "l", xlab=" ", ylab = "Energy sub metering")
lines(DateTime, data$Sub_metering_2, col="red")
lines(DateTime, data$Sub_metering_3, col="blue")
legend("topright", cex=1, lty=1 , col = c("black", "red", "blue"),
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
##Going back to origin locale
Sys.setlocale("LC_TIME", loc)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?"lattice"
?xplot
??xplot
?"lattice"
library(swirl)
swirl()
head(airquality)
xyplot(Ozon~Wind, airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=(5, 1))
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=c(5, 1))
xyplot(Ozone~Wind | Month, airquality, layout=c(5, 1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R", local=TRUE))
source(pathtofile("plot1.R"), local=TRUE))
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLablels.R"), local=TRUE)
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, diamonds)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
swirl()
str(mpg)
qplot(displ, hwy, mgp)
qplot(displ~hwy, mgp)
qplot(displ, hwy, data=mgp)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"))
qplot(hwy, mpg, color=drv)
qplot(y=hwy, mpg, color=drv)
qplot(y=hwy,data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets = drv~., binwidth=2)
?read.xls
read.table(./pliki/72.xlsx)
read.table(.\pliki/72.xlsx)
read.table("./pliki/72.xlsx")
read.table("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx")
x<-read.table("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx")
str(x)
View(x)
?read.table
x<-read.table("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx", header = FALSE, sep="tabs")
x
x<-read.csv("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx", header = FALSE)
x
x<-read.csv("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx", header = FALSE, sep=";")
x
?xlsx
??xlsx
x<-read.xlsx("/Users/monikatraple/Documents/RMF/2016/01_2016_RMFMaxxx/Dzienniczki/pliki/72.xlsx")
library(swirl)
swirl()
swirl(\)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col=blue)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
abline(low)
abline(low)
abline(h=low)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magneta", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(popullation)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg, col="wheat", main='Number of Counties in Each Region')
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution, boolean="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col='green')
hist(west$pm25, col='green')
west <- subset(pollution,region=="west")
hist(west$pm25, col='green')
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(pollution, latitude, pm25)
pollution(plot(latitude, pm25))
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
swirl()
swirl()
library(swirl)
swirl()
swirl()
?Devices
with faithful(plot(eruptions, waiting))
data("faithful")
with(faithful, plot(eruptions, waiting))
main("Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
swirl()
swirl()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xplot(Life.Exp~Income | region, data="state", layout=c(4,1))
xyplot(Life.Exp~Income | region, data="state", layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red", main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par('lty')
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may<-airquality$Month=="5"
may <- subset(airquality, Month==5)
?par()
colors()
colors("blue")
colours('blue')
?points
points(airquality$Wind, airquality$Ozone, pch=25,col="blue")
points(airquality$Wind, airquality$Ozone, pch=17,col="blue")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality, Month>5)
notmay <- subset(airquality, Month!=5)
?pch
points(notmay$Wind, notmay$Ozone, pch=8, col="red")
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"))
legend("topright", c(17,8), c("blue", "red"), legend=c("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(median(airquality$Wind, na.rm=TRUE), lty=2. lwd=2)
abline(median(airquality$Wind, na.rm=TRUE), lty=2, lwd=2)
?abline
abline(h=median(airquality$Wind, na.rm=TRUE), lty=2, lwd=2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Soloar, main = "Ozone and Solar")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
?mtext
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
head(airquality)
xyplot(Ozon~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout=c(5, 1))
xyplot(Ozone~Wind | Month, data = airquality, layout=c(5, 1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R", local=TRUE)
pathtofile("plot1.R")
source(pathtofile("plot1.R", local=TRUE))
source(pathtofile("plot1.R"), local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabeles.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data = diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
sample(colors(), 10)
pal<-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue", "green"), alpha=5)
p3<-colorRampPalette(c("blue", "green"), alpha=.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, .5, .5))
plot(x, y, pch=19, col=rgb(0, .5, .5, .3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(2))
showMe(pal(20))
image(volcano, col(pal(20)))
image(volcano, pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col=drv)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom = c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv, method="loess")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets = .~drv)
g<-ggplot(mpg, displ, hwy)
g<-ggplot(mpg, displ~hwy)
g<-ggplot(mpg, displ)
?ggplot
g<-ggplot(mpg, aes(displ, hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth()+method="lm"
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
)
g+geom_point(aes(color=drv)+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv)+ggtitle("Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+ggtitle("Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=4, appha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(color=drv)+theme_bw(base_family = "Times")
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3, 3))
g<-ggplot(testdat, aes(x=myx, y=myy))
geom_line(g)
g+geom_line()
g+geom_line()+ylim(-3, 3)
g+geom_line()+coord_cartesian(ylim=c(-3, 3))
g<-(mpg, aes(x=displ, y=hwy, color=factor(year)))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, marging=TRUE)
g+geom_point()+facet_grid(drv~cyl, margin=TRUE)
g+geom_point()+facet_grid(drv~cyl, margin=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margin=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, set=cut)
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qploy(carat, price, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point", "smooth"), method="lm", facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0,1,lenght=4), na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$caratm cutpoints)
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(methos="lm", size=3, color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
#Reading in data
NEI <- readRDS("./exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("./exdata-data-NEI_data/Source_Classification_Code.rds")
##Loading ggplot2 library
library(ggplot2)
NEI <- readRDS("./exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("./exdata-data-NEI_data/Source_Classification_Code.rds")
#Reading in data
NEI <- readRDS("./exdata-data-NEI_data/summarySCC_PM25.rds")
data("mtcars")
plot(mtcars$mpg, mtcars$wt)
?dev.set()
dev.off
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
quartz()
plot(mtcars$mpg, mtcars$wt)
install.packages(c("nlme", "survival"))
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$wt)
data("mtcars")
with(mtcars, plot(wt, drv))
plot(mtcars$mpg, mtcars$wt)
setwd("/Users/monikatraple/Documents/Coursera/5_Reproducible_Research/Assignment1/My_work")
setwd("/Users/monikatraple/Documents/Coursera/5_Reproducible_Research/Assignment1/RepData_PeerAssessment1")
library(knitr)
knit2html("PA1_html")
knit2html("PA1_template.Rmd")
